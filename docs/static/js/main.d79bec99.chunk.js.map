{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"uMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEVC,mBAAS,IAFC,mBAEvCC,EAFuC,KAE3BC,EAF2B,KAkB9C,OAEI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAQd,2BACIO,KAAK,OACLC,MAAOT,EACPU,SArBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,Y,uBCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIIA,EAAKC,OAJT,uBAIXC,EAJW,EAIXA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCGPO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACjC,OACI,yBAAKc,UAAU,0CACX,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,2BAAIA,KCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECAb,SAACA,GAAc,IAAD,EACZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAHyB,mBAC/BC,EAD+B,KACxBC,EADwB,KA8BtC,OAxBAC,qBAAU,WACNxB,EAAQC,GACHwB,MAAK,SAAAC,GAEFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAItB,CAACpB,IAcGqB,ED3B2BK,CAAa1B,GAAjCa,EAHuB,EAG7BN,KAAca,EAHe,EAGfA,QAEtB,OACI,oCACI,wBAAIJ,UAAU,qCAAqChB,GAElDoB,EAAU,uBAAGJ,UAAU,oCAAb,WAA8D,KAEzE,yBAAKA,UAAU,aAIPH,EAAOJ,KAAI,SAACC,GAAD,OACP,kBAAC,EAAD,eACIiB,IAAKjB,EAAIC,IACLD,UEsBjBkB,EAxCM,WAAM,MAKW1C,mBAAS,CAAC,cALrB,mBAKlBQ,EALkB,KAKNT,EALM,KAWzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAIA,4BAKIS,EAAWe,KAAI,SAAAT,GAAQ,OAGrB,kBAAC,EAAD,CACE2B,IAAK3B,EACLA,SAAUA,U,MC5BxB6B,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.d79bec99.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n    const [inputValue, setInputValue] = useState(''); // No se debe de dejar useState() ya que el estado será undefined, y la variable que cambia eso será\r\n\r\n    const handleInputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            // Como no se tiene acceso a las categorias como tal, se llama al call back\r\n            setCategories(categories => [inputValue, ...categories]);\r\n            setInputValue('');\r\n        }\r\n    }\r\n\r\n    return (\r\n        // En el caso que tengamos un elemento que agrupe todo lo demás, no es necesario poner un fragment\r\n        <form onSubmit={handleSubmit}>\r\n            {/* Cuando hay dos o más atributos, es mejor separarlo por lineas para poder verlo con mayor facilidad */}\r\n            <input\r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async (category) => {\r\n    // El encodeURI() es para remplazar espacio por % o caracter que no se avalido, para que se realice nuestra petición correctamente\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=6Kf5E2dO10CJ6wD92oZeU2nuatBeKxiB`;\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n    // El signo de pregunta es para denotar que si trae las imagenes, que las almacene, si no, no\r\n    const gifs = data.map(img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\n// export const GifGridItem = (img) => {\r\nexport const GifGridItem = ({ title, url }) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n            {/* Si no se hiciera desestructuración se tendría que acceder al titlo así */}\r\n            {/* {img.img.title} */}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n    // Usando nuestro custom Hook\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            {loading ? <p className=\"animate__animated animate__flash\">Loading</p> : null}\r\n\r\n            <div className=\"card-grid\">\r\n                {\r\n                    // En este caso con el ...img, se estará mandando cada propiedad de forma independiente para poder hacer desestructuración de una forma sencilla\r\n                    // El {...img} es como si nosotros mandaramos img={img.id, img.title, img.url} pero de una forma más corta\r\n                    images.map((img) => (\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        // img={img}\r\n                        />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs'\r\n\r\n// Custom Hook (La diferencia es que los custom Hooks no interactuan con el DOM como los functional components de los componentes, sólo trabajan con lógica)\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category)\r\n            .then(imgs => {\r\n                // setTimeout(() => {\r\n                setState({\r\n                    data: imgs,\r\n                    loading: false\r\n                })\r\n                // }, 3000);\r\n            });\r\n    }, [category]);\r\n\r\n    // // El useEffect para evitar que una instrucción se vuelva a renderizar, \r\n    // // Si no se mandan dependencias, le indicas a React que sólo quieres que se ejecute la primera vez que se renderice el componente\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //         .then(setImages);\r\n    //     // Cómo se tiene una función que el primer argumento es mandado como primer argumento a la función dentro de esta, se puede remplazar lo de abajo por lo de arriba\r\n    //     // .then(imgs => {\r\n    //     //     setImages(imgs);\r\n    //     // });\r\n    // }, [category]);\r\n    // Si la categoria EN EL COMPONENTE YA CREADO cambia, entonces, se ejecutaria denuevo el useEffect\r\n\r\n    return state;\r\n}","import React, { useState } from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = () => {\r\n\r\n  // No se deben de poner datos crudos ya que si se necesitan modificar, no hay manera de que React sepa que cambió el valor\r\n  // const categories = ['One Punch', 'Samurai X', 'Dragon Ball'];\r\n\r\n  const [categories, setCategories] = useState(['One Punch']);\r\n\r\n  // const handleAdd = () => {\r\n  //   setCategories([...categories, 'prueba']);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      <h2>GifExpertApp</h2>\r\n      <AddCategory setCategories={setCategories} />\r\n      <hr />\r\n\r\n      {/* <button onClick={handleAdd}>Agregar</button> */}\r\n\r\n      <ol>\r\n        {\r\n          // Creación de componentes dinamicamente\r\n          \r\n          // Las () es para indicar que estás regresando el objeto completo\r\n          categories.map(category => (\r\n            // El key, sirve para que react en el background sepa que elemento actualizar. Por eso debe ser único\r\n            // <li key={category}>{category}</li>\r\n            <GifGrid\r\n              key={category}\r\n              category={category}\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n\r\n    </>\r\n  )\r\n}\r\n\r\n\r\nexport default GifExpertApp;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);"],"sourceRoot":""}